// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | MINUS
  | DOT
  | EQ
  | MUL
  | COL
  | SC
  | COMMA
  | RARROW
  | RPAREN
  | LPAREN
  | RSQB
  | LSQB
  | RBRACE
  | LBRACE
  | UNION
  | ENUM
  | STRUCT
  | FN
  | IMPORT
  | OBJECT
  | INTERFACE
  | F64
  | F32
  | S64
  | S32
  | S16
  | S8
  | U64
  | U32
  | U16
  | U8
  | CHAR
  | BOOL
  | UNIT
  | IDENTIFIER of (string * Position)
  | TYPENAME of (string * Position)
  | FLOAT of (float)
  | INT of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_MINUS
    | TOKEN_DOT
    | TOKEN_EQ
    | TOKEN_MUL
    | TOKEN_COL
    | TOKEN_SC
    | TOKEN_COMMA
    | TOKEN_RARROW
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_RSQB
    | TOKEN_LSQB
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_UNION
    | TOKEN_ENUM
    | TOKEN_STRUCT
    | TOKEN_FN
    | TOKEN_IMPORT
    | TOKEN_OBJECT
    | TOKEN_INTERFACE
    | TOKEN_F64
    | TOKEN_F32
    | TOKEN_S64
    | TOKEN_S32
    | TOKEN_S16
    | TOKEN_S8
    | TOKEN_U64
    | TOKEN_U32
    | TOKEN_U16
    | TOKEN_U8
    | TOKEN_CHAR
    | TOKEN_BOOL
    | TOKEN_UNIT
    | TOKEN_IDENTIFIER
    | TOKEN_TYPENAME
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aModule
    | NONTERM_declList
    | NONTERM_decl
    | NONTERM_importDecl
    | NONTERM_ifaceDecl
    | NONTERM_tuple
    | NONTERM_typeName
    | NONTERM_fnTy
    | NONTERM_ty
    | NONTERM_tupleList
    | NONTERM_funcDecl
    | NONTERM_aMember
    | NONTERM_memberList
    | NONTERM_unionCase
    | NONTERM_caseList
    | NONTERM_unionDecl
    | NONTERM_structDecl
    | NONTERM_enumCase
    | NONTERM_enumDecl
    | NONTERM_enumCaseList
    | NONTERM_objectBody
    | NONTERM_typenameList
    | NONTERM_objectDecl
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Decl list) 
