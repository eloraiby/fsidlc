// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

//
// IDLC - Interface Definition Language Compiler
//
// Copyright (C) 2018-2019  Wael El Oraiby
//
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
open System
open Ast

let (|>|) a b = b a; a


# 39 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | MINUS
  | DOT
  | EQ
  | MUL
  | COL
  | SC
  | COMMA
  | RARROW
  | RPAREN
  | LPAREN
  | RSQB
  | LSQB
  | RBRACE
  | LBRACE
  | UNION
  | ENUM
  | STRUCT
  | FN
  | IMPORT
  | OBJECT
  | INTERFACE
  | F64
  | F32
  | S64
  | S32
  | S16
  | S8
  | U64
  | U32
  | U16
  | U8
  | CHAR
  | BOOL
  | UNIT
  | IDENTIFIER of (string * Position)
  | TYPENAME of (string * Position)
  | FLOAT of (float)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_MINUS
    | TOKEN_DOT
    | TOKEN_EQ
    | TOKEN_MUL
    | TOKEN_COL
    | TOKEN_SC
    | TOKEN_COMMA
    | TOKEN_RARROW
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_RSQB
    | TOKEN_LSQB
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_UNION
    | TOKEN_ENUM
    | TOKEN_STRUCT
    | TOKEN_FN
    | TOKEN_IMPORT
    | TOKEN_OBJECT
    | TOKEN_INTERFACE
    | TOKEN_F64
    | TOKEN_F32
    | TOKEN_S64
    | TOKEN_S32
    | TOKEN_S16
    | TOKEN_S8
    | TOKEN_U64
    | TOKEN_U32
    | TOKEN_U16
    | TOKEN_U8
    | TOKEN_CHAR
    | TOKEN_BOOL
    | TOKEN_UNIT
    | TOKEN_IDENTIFIER
    | TOKEN_TYPENAME
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aModule
    | NONTERM_declList
    | NONTERM_decl
    | NONTERM_importDecl
    | NONTERM_ifaceDecl
    | NONTERM_tuple
    | NONTERM_typeName
    | NONTERM_fnTy
    | NONTERM_ty
    | NONTERM_tupleList
    | NONTERM_funcDecl
    | NONTERM_aMember
    | NONTERM_memberList
    | NONTERM_unionCase
    | NONTERM_caseList
    | NONTERM_unionDecl
    | NONTERM_structDecl
    | NONTERM_enumCase
    | NONTERM_enumDecl
    | NONTERM_enumCaseList
    | NONTERM_objectBody
    | NONTERM_typenameList
    | NONTERM_objectDecl

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | MINUS  -> 1 
  | DOT  -> 2 
  | EQ  -> 3 
  | MUL  -> 4 
  | COL  -> 5 
  | SC  -> 6 
  | COMMA  -> 7 
  | RARROW  -> 8 
  | RPAREN  -> 9 
  | LPAREN  -> 10 
  | RSQB  -> 11 
  | LSQB  -> 12 
  | RBRACE  -> 13 
  | LBRACE  -> 14 
  | UNION  -> 15 
  | ENUM  -> 16 
  | STRUCT  -> 17 
  | FN  -> 18 
  | IMPORT  -> 19 
  | OBJECT  -> 20 
  | INTERFACE  -> 21 
  | F64  -> 22 
  | F32  -> 23 
  | S64  -> 24 
  | S32  -> 25 
  | S16  -> 26 
  | S8  -> 27 
  | U64  -> 28 
  | U32  -> 29 
  | U16  -> 30 
  | U8  -> 31 
  | CHAR  -> 32 
  | BOOL  -> 33 
  | UNIT  -> 34 
  | IDENTIFIER _ -> 35 
  | TYPENAME _ -> 36 
  | FLOAT _ -> 37 
  | INT _ -> 38 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_MINUS 
  | 2 -> TOKEN_DOT 
  | 3 -> TOKEN_EQ 
  | 4 -> TOKEN_MUL 
  | 5 -> TOKEN_COL 
  | 6 -> TOKEN_SC 
  | 7 -> TOKEN_COMMA 
  | 8 -> TOKEN_RARROW 
  | 9 -> TOKEN_RPAREN 
  | 10 -> TOKEN_LPAREN 
  | 11 -> TOKEN_RSQB 
  | 12 -> TOKEN_LSQB 
  | 13 -> TOKEN_RBRACE 
  | 14 -> TOKEN_LBRACE 
  | 15 -> TOKEN_UNION 
  | 16 -> TOKEN_ENUM 
  | 17 -> TOKEN_STRUCT 
  | 18 -> TOKEN_FN 
  | 19 -> TOKEN_IMPORT 
  | 20 -> TOKEN_OBJECT 
  | 21 -> TOKEN_INTERFACE 
  | 22 -> TOKEN_F64 
  | 23 -> TOKEN_F32 
  | 24 -> TOKEN_S64 
  | 25 -> TOKEN_S32 
  | 26 -> TOKEN_S16 
  | 27 -> TOKEN_S8 
  | 28 -> TOKEN_U64 
  | 29 -> TOKEN_U32 
  | 30 -> TOKEN_U16 
  | 31 -> TOKEN_U8 
  | 32 -> TOKEN_CHAR 
  | 33 -> TOKEN_BOOL 
  | 34 -> TOKEN_UNIT 
  | 35 -> TOKEN_IDENTIFIER 
  | 36 -> TOKEN_TYPENAME 
  | 37 -> TOKEN_FLOAT 
  | 38 -> TOKEN_INT 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_aModule 
    | 3 -> NONTERM_aModule 
    | 4 -> NONTERM_declList 
    | 5 -> NONTERM_declList 
    | 6 -> NONTERM_decl 
    | 7 -> NONTERM_decl 
    | 8 -> NONTERM_decl 
    | 9 -> NONTERM_decl 
    | 10 -> NONTERM_decl 
    | 11 -> NONTERM_decl 
    | 12 -> NONTERM_decl 
    | 13 -> NONTERM_importDecl 
    | 14 -> NONTERM_ifaceDecl 
    | 15 -> NONTERM_tuple 
    | 16 -> NONTERM_typeName 
    | 17 -> NONTERM_typeName 
    | 18 -> NONTERM_fnTy 
    | 19 -> NONTERM_fnTy 
    | 20 -> NONTERM_ty 
    | 21 -> NONTERM_ty 
    | 22 -> NONTERM_ty 
    | 23 -> NONTERM_ty 
    | 24 -> NONTERM_ty 
    | 25 -> NONTERM_ty 
    | 26 -> NONTERM_ty 
    | 27 -> NONTERM_ty 
    | 28 -> NONTERM_ty 
    | 29 -> NONTERM_ty 
    | 30 -> NONTERM_ty 
    | 31 -> NONTERM_ty 
    | 32 -> NONTERM_ty 
    | 33 -> NONTERM_ty 
    | 34 -> NONTERM_ty 
    | 35 -> NONTERM_ty 
    | 36 -> NONTERM_ty 
    | 37 -> NONTERM_ty 
    | 38 -> NONTERM_ty 
    | 39 -> NONTERM_tupleList 
    | 40 -> NONTERM_tupleList 
    | 41 -> NONTERM_funcDecl 
    | 42 -> NONTERM_funcDecl 
    | 43 -> NONTERM_aMember 
    | 44 -> NONTERM_memberList 
    | 45 -> NONTERM_memberList 
    | 46 -> NONTERM_unionCase 
    | 47 -> NONTERM_caseList 
    | 48 -> NONTERM_caseList 
    | 49 -> NONTERM_unionDecl 
    | 50 -> NONTERM_structDecl 
    | 51 -> NONTERM_enumCase 
    | 52 -> NONTERM_enumCase 
    | 53 -> NONTERM_enumDecl 
    | 54 -> NONTERM_enumCaseList 
    | 55 -> NONTERM_enumCaseList 
    | 56 -> NONTERM_objectBody 
    | 57 -> NONTERM_objectBody 
    | 58 -> NONTERM_typenameList 
    | 59 -> NONTERM_typenameList 
    | 60 -> NONTERM_objectDecl 
    | 61 -> NONTERM_objectDecl 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | MINUS  -> "MINUS" 
  | DOT  -> "DOT" 
  | EQ  -> "EQ" 
  | MUL  -> "MUL" 
  | COL  -> "COL" 
  | SC  -> "SC" 
  | COMMA  -> "COMMA" 
  | RARROW  -> "RARROW" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | RSQB  -> "RSQB" 
  | LSQB  -> "LSQB" 
  | RBRACE  -> "RBRACE" 
  | LBRACE  -> "LBRACE" 
  | UNION  -> "UNION" 
  | ENUM  -> "ENUM" 
  | STRUCT  -> "STRUCT" 
  | FN  -> "FN" 
  | IMPORT  -> "IMPORT" 
  | OBJECT  -> "OBJECT" 
  | INTERFACE  -> "INTERFACE" 
  | F64  -> "F64" 
  | F32  -> "F32" 
  | S64  -> "S64" 
  | S32  -> "S32" 
  | S16  -> "S16" 
  | S8  -> "S8" 
  | U64  -> "U64" 
  | U32  -> "U32" 
  | U16  -> "U16" 
  | U8  -> "U8" 
  | CHAR  -> "CHAR" 
  | BOOL  -> "BOOL" 
  | UNIT  -> "UNIT" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | TYPENAME _ -> "TYPENAME" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | MUL  -> (null : System.Object) 
  | COL  -> (null : System.Object) 
  | SC  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RARROW  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RSQB  -> (null : System.Object) 
  | LSQB  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | UNION  -> (null : System.Object) 
  | ENUM  -> (null : System.Object) 
  | STRUCT  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | OBJECT  -> (null : System.Object) 
  | INTERFACE  -> (null : System.Object) 
  | F64  -> (null : System.Object) 
  | F32  -> (null : System.Object) 
  | S64  -> (null : System.Object) 
  | S32  -> (null : System.Object) 
  | S16  -> (null : System.Object) 
  | S8  -> (null : System.Object) 
  | U64  -> (null : System.Object) 
  | U32  -> (null : System.Object) 
  | U16  -> (null : System.Object) 
  | U8  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPENAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 2us; 65535us; 0us; 6us; 4us; 7us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 0us; 9us; 4us; 9us; 9us; 65535us; 22us; 57us; 37us; 57us; 40us; 57us; 58us; 57us; 63us; 57us; 64us; 57us; 66us; 57us; 68us; 57us; 74us; 57us; 2us; 65535us; 107us; 108us; 111us; 105us; 9us; 65535us; 22us; 38us; 37us; 38us; 40us; 38us; 58us; 38us; 63us; 38us; 64us; 38us; 66us; 39us; 68us; 38us; 74us; 38us; 9us; 65535us; 22us; 31us; 37us; 28us; 40us; 29us; 58us; 30us; 63us; 32us; 64us; 33us; 66us; 34us; 68us; 35us; 74us; 36us; 1us; 65535us; 22us; 23us; 2us; 65535us; 0us; 14us; 4us; 14us; 6us; 65535us; 19us; 69us; 20us; 72us; 70us; 72us; 71us; 72us; 85us; 69us; 102us; 69us; 3us; 65535us; 19us; 20us; 85us; 70us; 102us; 71us; 3us; 65535us; 75us; 76us; 77us; 78us; 81us; 75us; 1us; 65535us; 81us; 77us; 2us; 65535us; 0us; 11us; 4us; 11us; 2us; 65535us; 0us; 13us; 4us; 13us; 3us; 65535us; 94us; 97us; 98us; 99us; 100us; 101us; 2us; 65535us; 0us; 12us; 4us; 12us; 1us; 65535us; 94us; 95us; 2us; 65535us; 106us; 112us; 110us; 113us; 1us; 65535us; 111us; 106us; 2us; 65535us; 0us; 10us; 4us; 10us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 10us; 13us; 16us; 26us; 29us; 39us; 49us; 51us; 54us; 61us; 65us; 69us; 71us; 74us; 77us; 81us; 84us; 86us; 89us; 91us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 5us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 2us; 14us; 45us; 1us; 14us; 1us; 15us; 2us; 15us; 40us; 1us; 15us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 2us; 18us; 18us; 2us; 18us; 19us; 3us; 18us; 37us; 38us; 2us; 18us; 39us; 2us; 18us; 39us; 2us; 18us; 40us; 2us; 18us; 41us; 2us; 18us; 43us; 2us; 18us; 46us; 1us; 18us; 2us; 19us; 35us; 3us; 19us; 35us; 42us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 33us; 34us; 1us; 34us; 1us; 34us; 1us; 36us; 2us; 37us; 38us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 40us; 2us; 41us; 42us; 2us; 41us; 42us; 1us; 43us; 1us; 43us; 1us; 44us; 2us; 45us; 50us; 2us; 45us; 57us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 2us; 48us; 49us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 1us; 50us; 2us; 51us; 52us; 2us; 51us; 52us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 53us; 2us; 53us; 55us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 2us; 56us; 57us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 59us; 60us; 1us; 59us; 1us; 59us; 2us; 60us; 61us; 2us; 60us; 61us; 1us; 60us; 1us; 60us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 44us; 46us; 48us; 51us; 53us; 56us; 58us; 60us; 63us; 66us; 70us; 73us; 76us; 79us; 82us; 85us; 88us; 90us; 93us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 128us; 130us; 132us; 134us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 152us; 155us; 157us; 159us; 161us; 164us; 167us; 169us; 171us; 173us; 175us; 177us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 201us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 234us; 236us; 238us; 240us; 243us; 245us; 247us; 250us; 253us; 255us; 257us; |]
let _fsyacc_action_rows = 114
let _fsyacc_actionTableElements = [|8us; 32768us; 0us; 3us; 15us; 79us; 16us; 92us; 17us; 83us; 19us; 15us; 20us; 109us; 21us; 17us; 35us; 65us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 8us; 32768us; 0us; 5us; 15us; 79us; 16us; 92us; 17us; 83us; 19us; 15us; 20us; 109us; 21us; 17us; 35us; 65us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 36us; 16us; 0us; 16397us; 1us; 32768us; 36us; 18us; 1us; 32768us; 14us; 19us; 1us; 32768us; 35us; 67us; 2us; 32768us; 13us; 21us; 35us; 67us; 0us; 16398us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 2us; 32768us; 7us; 64us; 9us; 24us; 0us; 16399us; 1us; 16401us; 2us; 26us; 1us; 32768us; 36us; 27us; 0us; 16400us; 1us; 16402us; 8us; 37us; 1us; 16403us; 8us; 37us; 3us; 32768us; 4us; 60us; 8us; 37us; 11us; 59us; 2us; 32768us; 7us; 63us; 8us; 37us; 1us; 16423us; 8us; 37us; 1us; 16424us; 8us; 37us; 1us; 16425us; 8us; 37us; 1us; 16427us; 8us; 37us; 1us; 16430us; 8us; 37us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 1us; 16419us; 8us; 40us; 1us; 16419us; 8us; 40us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 1us; 16417us; 2us; 55us; 1us; 32768us; 36us; 56us; 0us; 16418us; 0us; 16420us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 0us; 16421us; 1us; 32768us; 38us; 61us; 1us; 32768us; 11us; 62us; 0us; 16422us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 1us; 32768us; 5us; 66us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 1us; 32768us; 5us; 68us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 0us; 16428us; 2us; 32768us; 13us; 86us; 35us; 67us; 2us; 32768us; 13us; 104us; 35us; 67us; 0us; 16429us; 1us; 32768us; 5us; 74us; 16us; 32768us; 10us; 22us; 12us; 58us; 22us; 53us; 23us; 52us; 24us; 51us; 25us; 50us; 26us; 49us; 27us; 48us; 28us; 47us; 29us; 46us; 30us; 45us; 31us; 44us; 32us; 43us; 33us; 42us; 34us; 41us; 36us; 54us; 1us; 32768us; 36us; 73us; 0us; 16431us; 2us; 32768us; 13us; 82us; 36us; 73us; 0us; 16432us; 1us; 32768us; 36us; 80us; 1us; 32768us; 14us; 81us; 1us; 32768us; 36us; 73us; 0us; 16433us; 1us; 32768us; 36us; 84us; 1us; 32768us; 14us; 85us; 1us; 32768us; 35us; 67us; 0us; 16434us; 1us; 32768us; 3us; 88us; 2us; 32768us; 1us; 90us; 38us; 89us; 0us; 16435us; 1us; 32768us; 38us; 91us; 0us; 16436us; 1us; 32768us; 36us; 93us; 1us; 32768us; 14us; 94us; 1us; 32768us; 35us; 87us; 2us; 32768us; 6us; 100us; 13us; 96us; 0us; 16437us; 1us; 32768us; 6us; 98us; 1us; 32768us; 35us; 87us; 0us; 16438us; 1us; 32768us; 35us; 87us; 0us; 16439us; 2us; 32768us; 13us; 103us; 35us; 67us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 2us; 32768us; 7us; 107us; 14us; 102us; 1us; 32768us; 36us; 25us; 0us; 16443us; 1us; 32768us; 36us; 110us; 2us; 32768us; 5us; 111us; 14us; 102us; 1us; 32768us; 36us; 25us; 0us; 16444us; 0us; 16445us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 11us; 12us; 21us; 22us; 23us; 24us; 25us; 26us; 27us; 28us; 29us; 30us; 31us; 33us; 34us; 36us; 38us; 40us; 43us; 44us; 61us; 64us; 65us; 67us; 69us; 70us; 72us; 74us; 78us; 81us; 83us; 85us; 87us; 89us; 91us; 108us; 110us; 112us; 129us; 130us; 131us; 132us; 133us; 134us; 135us; 136us; 137us; 138us; 139us; 140us; 141us; 142us; 144us; 146us; 147us; 148us; 165us; 166us; 168us; 170us; 171us; 188us; 205us; 207us; 224us; 226us; 243us; 244us; 247us; 250us; 251us; 253us; 270us; 272us; 273us; 276us; 277us; 279us; 281us; 283us; 284us; 286us; 288us; 290us; 291us; 293us; 296us; 297us; 299us; 300us; 302us; 304us; 306us; 309us; 310us; 312us; 314us; 315us; 317us; 318us; 321us; 322us; 323us; 324us; 327us; 329us; 330us; 332us; 335us; 337us; 338us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 5us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 3us; 5us; 3us; 3us; 3us; 3us; 3us; 1us; 2us; 3us; 2us; 2us; 5us; 5us; 3us; 4us; 5us; 3us; 3us; 2us; 3us; 1us; 3us; 5us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 16us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; 16393us; 16394us; 16395us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 16414us; 16415us; 16416us; 65535us; 65535us; 16418us; 16420us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; 65535us; 65535us; 65535us; 16431us; 65535us; 16432us; 65535us; 65535us; 65535us; 16433us; 65535us; 65535us; 65535us; 16434us; 65535us; 65535us; 16435us; 65535us; 16436us; 65535us; 65535us; 65535us; 65535us; 16437us; 65535us; 65535us; 16438us; 65535us; 16439us; 65535us; 16440us; 16441us; 16442us; 65535us; 65535us; 16443us; 65535us; 65535us; 65535us; 16444us; 16445us; |]
let _fsyacc_reductions ()  =    [| 
# 407 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Decl list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 416 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aModule)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                      _1 
                   )
# 84 "Parser.fsy"
                 : Decl list));
# 427 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                               [] 
                   )
# 87 "Parser.fsy"
                 : 'aModule));
# 437 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                        _1 
                   )
# 88 "Parser.fsy"
                 : 'aModule));
# 448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                         [_1] 
                   )
# 91 "Parser.fsy"
                 : 'declList));
# 459 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                         _2 :: _1 
                   )
# 92 "Parser.fsy"
                 : 'declList));
# 471 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'importDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                       _1 
                   )
# 95 "Parser.fsy"
                 : 'decl));
# 482 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ifaceDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                       _1 
                   )
# 96 "Parser.fsy"
                 : 'decl));
# 493 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                       _1 
                   )
# 97 "Parser.fsy"
                 : 'decl));
# 504 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                       _1 
                   )
# 98 "Parser.fsy"
                 : 'decl));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                       _1 
                   )
# 99 "Parser.fsy"
                 : 'decl));
# 526 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                       _1 
                   )
# 100 "Parser.fsy"
                 : 'decl));
# 537 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'funcDecl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                       _1 
                   )
# 101 "Parser.fsy"
                 : 'decl));
# 548 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                           DeclImport (Read _2) 
                   )
# 104 "Parser.fsy"
                 : 'importDecl));
# 559 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                       DeclInterface { Interface.name = fst _2; Interface.pos = snd _2; members = _4 |> List.rev } 
                   )
# 107 "Parser.fsy"
                 : 'ifaceDecl));
# 571 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                   _2 |> List.rev 
                   )
# 110 "Parser.fsy"
                 : 'tuple));
# 582 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                 Qualified (fst _1, fst _3, snd _1) 
                   )
# 113 "Parser.fsy"
                 : 'typeName));
# 594 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                 Simple (fst _1, snd _1) 
                   )
# 114 "Parser.fsy"
                 : 'typeName));
# 605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                 TyFnSig(_1, _3) 
                   )
# 117 "Parser.fsy"
                 : 'fnTy));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fnTy)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                 TyFnSig(_1, _3) 
                   )
# 118 "Parser.fsy"
                 : 'fnTy));
# 629 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                 TyUnit 
                   )
# 121 "Parser.fsy"
                 : 'ty));
# 639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                 TyBool 
                   )
# 122 "Parser.fsy"
                 : 'ty));
# 649 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                 TyChar 
                   )
# 123 "Parser.fsy"
                 : 'ty));
# 659 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                 TyU8 
                   )
# 124 "Parser.fsy"
                 : 'ty));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                 TyU16 
                   )
# 125 "Parser.fsy"
                 : 'ty));
# 679 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                 TyU32 
                   )
# 126 "Parser.fsy"
                 : 'ty));
# 689 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                 TyU64 
                   )
# 127 "Parser.fsy"
                 : 'ty));
# 699 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                 TyS8 
                   )
# 128 "Parser.fsy"
                 : 'ty));
# 709 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                 TyS16 
                   )
# 129 "Parser.fsy"
                 : 'ty));
# 719 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                 TyS32 
                   )
# 130 "Parser.fsy"
                 : 'ty));
# 729 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                 TyS64 
                   )
# 131 "Parser.fsy"
                 : 'ty));
# 739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                 TyF32 
                   )
# 132 "Parser.fsy"
                 : 'ty));
# 749 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                 TyF64 
                   )
# 133 "Parser.fsy"
                 : 'ty));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                 TyName _1 
                   )
# 134 "Parser.fsy"
                 : 'ty));
# 770 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                 TyQName (fst _1, fst _3, snd _1) 
                   )
# 135 "Parser.fsy"
                 : 'ty));
# 782 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fnTy)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                 _1 
                   )
# 136 "Parser.fsy"
                 : 'ty));
# 793 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tuple)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                 TyTuple _1 
                   )
# 137 "Parser.fsy"
                 : 'ty));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                 TyVector _2 
                   )
# 138 "Parser.fsy"
                 : 'ty));
# 815 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                 TyArray (_2, _4 |> uint32) 
                   )
# 139 "Parser.fsy"
                 : 'ty));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                   _3 :: [_1] 
                   )
# 143 "Parser.fsy"
                 : 'tupleList));
# 839 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tupleList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                   _3 :: _1 
                   )
# 144 "Parser.fsy"
                 : 'tupleList));
# 851 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                   DeclFunc (_1, _3) 
                   )
# 147 "Parser.fsy"
                 : 'funcDecl));
# 863 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'fnTy)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                   DeclFunc (_1, _3) 
                   )
# 148 "Parser.fsy"
                 : 'funcDecl));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                             { Member.name = fst _1; Member.pos = snd _1; Member.ty = _3 } 
                   )
# 151 "Parser.fsy"
                 : 'aMember));
# 887 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aMember)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                     [_1] 
                   )
# 154 "Parser.fsy"
                 : 'memberList));
# 898 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'aMember)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                     _2 :: _1 
                   )
# 155 "Parser.fsy"
                 : 'memberList));
# 910 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                     { UnionCase.name = fst _1; UnionCase.pos = snd _1; UnionCase.ty = _3 } 
                   )
# 158 "Parser.fsy"
                 : 'unionCase));
# 922 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCase)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                     _2 :: [_1] 
                   )
# 161 "Parser.fsy"
                 : 'caseList));
# 934 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'caseList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'unionCase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                     _2 :: _1 
                   )
# 162 "Parser.fsy"
                 : 'caseList));
# 946 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'caseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                                 DeclUnion { Union.name = fst _2; pos = snd _2; cases = _4 |> List.rev } 
                   )
# 165 "Parser.fsy"
                 : 'unionDecl));
# 958 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                                    DeclStruct { Struct.name = fst _2; pos = snd _2; members = _4 |> List.rev } 
                   )
# 168 "Parser.fsy"
                 : 'structDecl));
# 970 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                   (fst _1, snd _1, _3 |> int64) 
                   )
# 171 "Parser.fsy"
                 : 'enumCase));
# 982 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                   (fst _1, snd _1, -_4 |> int64) 
                   )
# 172 "Parser.fsy"
                 : 'enumCase));
# 994 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumCaseList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                                    DeclEnum { Enum.name = fst _2; pos = snd _2; cases = _4 |> List.rev } 
                   )
# 175 "Parser.fsy"
                 : 'enumDecl));
# 1006 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumCase)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumCase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                   _3 :: [_1] 
                   )
# 178 "Parser.fsy"
                 : 'enumCaseList));
# 1018 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumCaseList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'enumCase)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                     _3 :: _1 
                   )
# 179 "Parser.fsy"
                 : 'enumCaseList));
# 1030 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                   [] 
                   )
# 182 "Parser.fsy"
                 : 'objectBody));
# 1040 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'memberList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                    _2 |> List.rev 
                   )
# 183 "Parser.fsy"
                 : 'objectBody));
# 1051 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                   [_1] 
                   )
# 186 "Parser.fsy"
                 : 'typenameList));
# 1062 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typenameList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeName)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                       _3 :: _1 
                   )
# 187 "Parser.fsy"
                 : 'typenameList));
# 1074 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typenameList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                                        DeclObj { Obj.name = fst _2; pos = snd _2; ifaces = _4 |> List.rev; members = _5 } 
                   )
# 190 "Parser.fsy"
                 : 'objectDecl));
# 1087 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string * Position)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'objectBody)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                       DeclObj { Obj.name = fst _2; pos = snd _2; ifaces = []; members = _3 } 
                   )
# 191 "Parser.fsy"
                 : 'objectDecl));
|]
# 1100 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Decl list =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
