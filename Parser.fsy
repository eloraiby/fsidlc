%{
//
// IDLC - Interface Definition Language Compiler
//
// Copyright (C) 2018-2019  Wael El Oraiby
//
// All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
open System
open Ast

let (|>|) a b = b a; a

%}

%start start

%token <int> INT
%token <float> FLOAT
%token <string * Position> TYPENAME
%token <string * Position> IDENTIFIER

%token UNIT
%token BOOL
%token CHAR
%token U8
%token U16
%token U32
%token U64
%token S8
%token S16
%token S32
%token S64
%token F32
%token F64

%token INTERFACE
%token OBJECT
%token IMPORT
%token FN
%token STRUCT
%token ENUM
%token UNION
%token LBRACE
%token RBRACE
%token LSQB
%token RSQB
%token LPAREN
%token RPAREN
%token RARROW
%token COMMA
%token SC
%token COL
%token MUL
%token EQ
%token DOT
%token MINUS
%token EOF

//%right ARROW

%type <Decl list> start

%%

start: aModule { $1 }

aModule:
  | EOF { [] }
  | declList EOF { $1 }

declList:
  | decl          { [$1] }
  | declList decl { $2 :: $1 }

decl:
  | importDecl  { $1 }
  | ifaceDecl   { $1 }
  | objectDecl  { $1 }
  | unionDecl   { $1 }
  | enumDecl    { $1 }
  | structDecl  { $1 }
  | funcDecl    { $1 }

importDecl:
  | IMPORT TYPENAME { DeclImport (Read $2) }

ifaceDecl:
  | INTERFACE TYPENAME LBRACE memberList RBRACE { DeclInterface { Interface.name = fst $2; Interface.pos = snd $2; members = $4 |> List.rev } }

tuple:
  | LPAREN tupleList RPAREN { $2 |> List.rev }

typeName:
  | TYPENAME DOT TYPENAME { Qualified (fst $1, fst $3, snd $1) }
  | TYPENAME              { Simple (fst $1, snd $1) }

fnTy:
  | ty RARROW ty          { TyFnSig($1, $3) }
  | fnTy RARROW ty        { TyFnSig($1, $3) }

ty:
  | UNIT                  { TyUnit }
  | BOOL                  { TyBool }
  | CHAR                  { TyChar }
  | U8                    { TyU8 }
  | U16                   { TyU16 }
  | U32                   { TyU32 }
  | U64                   { TyU64 }
  | S8                    { TyS8 }
  | S16                   { TyS16 }
  | S32                   { TyS32 }
  | S64                   { TyS64 }
  | F32                   { TyF32 }
  | F64                   { TyF64 }
  | TYPENAME              { TyName $1 }
  | TYPENAME DOT TYPENAME { TyQName (fst $1, fst $3, snd $1) }
  | LPAREN fnTy LPAREN    { $2 }
  | tuple                 { TyTuple $1 }
  | LSQB ty RSQB          { TyVector $2 }
  | LSQB ty MUL INT RSQB  { TyArray ($2, $4 |> uint32) }


tupleList:
  | ty COMMA ty             { $3 :: [$1] }
  | tupleList COMMA ty      { $3 :: $1 }

funcDecl:
  | IDENTIFIER COL ty       { DeclFunc ($1, $3) }
  | IDENTIFIER COL fnTy     { DeclFunc ($1, $3) }

aMember:
  | IDENTIFIER COL ty { { Member.name = fst $1; Member.pos = snd $1; Member.ty = $3 } }

memberList:
  | aMember                   { [$1] }
  | memberList COMMA aMember  { $3 :: $1 }

unionCase:
  | TYPENAME COL ty           { { UnionCase.name = fst $1; UnionCase.pos = snd $1; UnionCase.ty = $3 } }

caseList:
  | unionCase SC unionCase  { $3 :: [$1] }
  | caseList SC unionCase   { $3 :: $1 }

unionDecl:
  | UNION TYPENAME LBRACE caseList RBRACE { DeclUnion { Union.name = fst $2; pos = snd $2; cases = $4 |> List.rev } }

structDecl:
  | STRUCT TYPENAME LBRACE memberList RBRACE { DeclStruct { Struct.name = fst $2; pos = snd $2; members = $4 |> List.rev } }

enumCase:
  | IDENTIFIER EQ INT       { (fst $1, snd $1, $3 |> int64) }
  | IDENTIFIER EQ MINUS INT { (fst $1, snd $1, -$4 |> int64) }

enumDecl:
  | ENUM TYPENAME LBRACE enumCaseList RBRACE { DeclEnum { Enum.name = fst $2; pos = snd $2; cases = $4 |> List.rev } }

enumCaseList:
  | enumCase SC enumCase    { $3 :: [$1] }
  | enumCaseList SC enumCase  { $3 :: $1 }

objectBody:
  | LBRACE RBRACE           { [] }
  | LBRACE memberList RBRACE { $2 |> List.rev }

typenameList:
  | typeName                { [$1] }
  | typenameList COMMA typeName { $3 :: $1 }

objectDecl:
  | OBJECT TYPENAME COL typenameList objectBody  { DeclObj { Obj.name = fst $2; pos = snd $2; ifaces = $4 |> List.rev; members = $5 } }
  | OBJECT TYPENAME objectBody  { DeclObj { Obj.name = fst $2; pos = snd $2; ifaces = []; members = $3 } }